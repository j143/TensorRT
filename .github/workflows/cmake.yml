name: CMake

on:
#   push:
#     branches: [ master ]
#   pull_request:
#     branches: [ master ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            cuda_version: "11.3"
            gcc_version: 10
          - os: ubuntu-18.04
            cuda_version: "10.1"
            gcc_version: 8

    steps:
    - uses: actions/checkout@v2
    
    - name: Install CUDA
      env:
        cuda: ${{ matrix.cuda }}
      run: _action/install_cuda.sh
      shell: bash
    
    # Host compilers
    - name: Install gcc and g++
      run: |
        sudo apt install -y gcc-${{ matrix.gcc_version }} g++-${{ matrix.gcc_version }}
        echo "CC=/usr/bin/gcc-${{ matrix.gcc_version }}" >> $GITHUB_ENV
        echo "CXX=/usr/bin/g++-${{ matrix.gcc_version }}" >> $GITHUB_ENV
        echo "CUDA_HOST_CXX=/usr/bin/g++-${{ matrix.gcc_version }}" >> $GITHUB_ENV

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
